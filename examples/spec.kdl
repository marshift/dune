/* example file structure:
	components/ 				# holds components
		component.kdl
	layouts/					# holds layouts - just components that define page "shells"
		base.kdl
	pages/
		index.kdl
		index.(js|mjs|ts|mts)	# optional, allows passing data into the template
		subpage.kdl
*/

// `import <path: string>` loads another file (and its companion file), you can use components defined there
// imports are constrained to the current file, so importing A -> B -> C doesn't let you use C from A
// remote file imports are also supported via URLs, e.g. `http://` or `file://`
import "./components/date.kdl"

// `component <name: string> <body>` defines a reusable component
// components take props which can be used inside of the body
component "greeting" {
	// `text <string>` for raw text
	// supports templating via `${<expr>}`
	// expressions support a subset of JavaScript syntax
	text ":3"

	// use html elements by specifying their name
	// passed values are shorthand for `text`
	p "Hello, ${user}!"

	// `element <expression> <body>` if you need something dynamic
	element "bold ? \"b\" : \"p\"" {
		text "Text is bold? ${bold}"
	}

	// `if/elif/else <expression> <body>` perform conditionals
	// `elif/else` only work when the nodes are next to each other in the tree
	if "user === \"marsh\"" {
		p "The bouny ( :rabbit2: )"
	}
	elif "user === \"Jules\"" {
		p "cgat Needd Th Waber :crying_cat_face:"
	}
	else {
		p "Who the hell are you?"
	}
}

component "greetings" {
	// `use <name: string>` uses a reusable component
	// pass props to components with KDL properties
	// components can be nested inside other components
	// the body of components are in an isolated context
	// data can be passed in via templating the props
	use "greeting" user="Jules" bold=#false
	use "greeting" user="marsh" bold=#true
}

component "content" {
	// `slot <name: string>` serves as a slot for other content
	header {
		slot "header"
	}

	main {
		slot "content"
	}

	footer {
		slot "footer"
	}
}

// `page <body>` is the entrypoint of the page, not required if a file only provides components
page {
	body {
		use "content" {
			// `insert <name: string> <body>` inserts content into a slot
			insert "header" {
				h1 "Jules' Cool Page"
			}

			insert "content" {
				use "greetings"
			}

			insert "footer" {
				p "copyright cool people 2025"
				use "date"

				// `each <expression> <variable: string> <body>` iterates over an array
				// e.g. imagine a passed `{ links: { href: string; text: string; }[] }`
				each "links" "link" {
					p {
						a href="${link.href}" "${link.text}"
					}
				}
			}
		}
	}
}
